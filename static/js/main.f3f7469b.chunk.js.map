{"version":3,"sources":["components/NavBar.jsx","API/OMDB-GET-imdbID.jsx","components/SingleMovie.jsx","components/InTheater.jsx","API/OMDB-GET-Search.jsx","components/SearchResult.jsx","API/GETComments.jsx","components/SingleComment.jsx","components/MovieComments.jsx","components/MovieDetail.jsx","components/MainComponent.jsx","serviceWorker.js","index.js"],"names":["NavBar","state","search","e","console","log","target","value","setState","searchKeyword","className","to","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","onKeyUp","this","placeholder","Component","OMDBGETimdbID","imdbID","a","URL","concat","fetch","method","response","ok","json","SingleMovie","componentDidMount","movieID","props","movie","src","Poster","style","width","alt","Title","inTheater","inTheaterSection","map","index","key","OMDBGETSearch","searchQuery","SearchResult","loading","match","params","searchArray","role","Search","toString","auth","btoa","username","headers","Headers","GETComments","SingleComment","comment","class","rate","MovieComments","comments","length","MovieDetail","movieId","componentDidUpdate","prevProps","prevState","Year","Genre","imdbRating","Plot","MainComponent","path","component","InTheater","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f3f7469b.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass NavBar extends Component {\r\n  state = {}\r\n  search = (e) => {    \r\n    console.log(e.target.value);\r\n        this.setState({ \r\n            searchKeyword: e.target.value\r\n        })\r\n  }\r\n  render() {\r\n    return (\r\n      <nav className=\"navbar fixed-top navbar-expand-sm navbar-dark bg-dark\">\r\n        <Link className=\"navbar-brand\" to=\"/\">FayJu Flix</Link>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-toggle=\"collapse\"\r\n          data-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav mr-auto\">\r\n            <li \r\n              className=\"nav-item active\"\r\n              data-toggle=\"collapse\"\r\n              data-target=\".navbar-collapse.show\"\r\n              >\r\n              <Link to=\"/movies-in-theater\" className=\"nav-link\" >Movies In Theater</Link>\r\n            </li>\r\n          </ul>\r\n          <form className=\"form-inline\">          \r\n              <input\r\n                onKeyUp={this.search}\r\n                className=\"form-control mr-sm-2\"\r\n                type=\"search\"\r\n                placeholder=\"Search movies\"\r\n                aria-label=\"Search\">\r\n              </input>\r\n              <Link to={\"/search/\" + this.state.searchKeyword}>\r\n              <button \r\n                className=\"btn btn-outline-success my-2 my-sm-0\" \r\n                type=\"submit\"                \r\n                data-toggle=\"collapse\"\r\n                data-target=\".navbar-collapse.show\"\r\n                >\r\n                Search\r\n              </button>\r\n              </Link>\r\n          </form>\r\n        </div>\r\n      </nav >\r\n    );\r\n  }\r\n}\r\n\r\nexport default NavBar;","const OMDBGETimdbID = async (imdbID) => {\r\n    let URL = \"https://www.omdbapi.com/?apikey=251ff3f5&i=\".concat(imdbID);\r\n        try {\r\n            let response = await fetch(URL, {\r\n                method: \"GET\"\r\n            })\r\n            if (response.ok) {\r\n                return await response.json()\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n}\r\n\r\nexport default OMDBGETimdbID;","import React, { Component } from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nimport OMDBGETimdbID from '../API/OMDB-GET-imdbID';\r\nclass SingleMovie extends Component {\r\n    state = {};\r\n    componentDidMount = async () => {\r\n        let movieID = this.props.movie.imdbID;\r\n        let movie = await OMDBGETimdbID(movieID);\r\n        this.setState({\r\n            movie: movie\r\n        })\r\n    }\r\n    render() {\r\n        if (this.state.movie) {\r\n            let movie = this.state.movie;\r\n            return (\r\n                <div className=\"col-4 col-sm-3 col-md-2 px-1\">\r\n                    <Link to={\"/movie-detail/\" + this.state.movie.imdbID}>\r\n                        <img src={movie.Poster} style={{ width: \"100%\" }} className=\"mb-2\" alt={movie.Title} />\r\n                    </Link>\r\n                </div>\r\n            )\r\n        } else {\r\n            return (\r\n                <div>No Movie Available.</div>\r\n            )\r\n        }\r\n    }\r\n};\r\nexport default SingleMovie;","import React from 'react';\r\nimport SingleMovie from './SingleMovie';\r\n\r\nconst inTheater = [\r\n    {\r\n        \"imdbID\": \"tt7286456\",\r\n    },\r\n    {\r\n        \"imdbID\": \"tt9248934\"\r\n    },\r\n    {\r\n        \"imdbID\": \"tt1025100\"\r\n    },\r\n    {\r\n        \"imdbID\": \"tt4520988\"\r\n    },\r\n    {\r\n        \"imdbID\": \"tt9763442\"\r\n    }];\r\n\r\nconst inTheaterSection = () => {\r\n    return (\r\n        <>\r\n            <h3 className=\"display-4\">In Theater</h3>\r\n            <div className=\"row\">\r\n                {inTheater.map((movie, index) => <SingleMovie movie={movie} key={index} />)}\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default inTheaterSection;","const OMDBGETSearch = async (searchQuery) => {\r\n    let URL = \"https://www.omdbapi.com/?apikey=251ff3f5&s=\".concat(searchQuery);\r\n        try {\r\n            let response = await fetch(URL, {\r\n                method: \"GET\"\r\n            })\r\n            if (response.ok) {\r\n                return await response.json()\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n}\r\n\r\nexport default OMDBGETSearch;","import React, { Component } from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nimport OMDBGETSearch from '../API/OMDB-GET-Search';\r\n\r\nclass SearchResult extends Component {\r\n    state = {\r\n        loading: true\r\n    }\r\n    render() {\r\n        let { searchQuery } = this.state;\r\n        let { searchArray } = this.state;\r\n        if (!this.state.loading) {\r\n            return (\r\n                <>\r\n                    <h3 className=\"display-4\">Search: {searchQuery}</h3>\r\n                    <div className=\"row\">\r\n                        {searchArray.Search.map((movie, index) => {\r\n                            return (\r\n                                <div key={index.toString()} className=\"col-6 col-sm-4 col-md-4 col-lg-1 px-1\">\r\n                                    <Link to={\"/movie-detail/\" + movie.imdbID}>\r\n                                        <img src={movie.Poster} style={{ width: \"100%\" }} className=\"mb-2\" alt={movie.Title} />\r\n                                    </Link>\r\n                                </div>\r\n                            )\r\n                        })}\r\n                    </div>\r\n                </>\r\n            )\r\n        } else {\r\n            return (\r\n                <div className=\"spinner-grow\" role=\"status\">\r\n                    <span className=\"sr-only\">Loading...</span>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n    componentDidMount = async () => {\r\n        console.log(\"Component did mount.\")\r\n        let searchQuery = this.props.match.params.searchQuery;\r\n        let searchArray = await OMDBGETSearch(searchQuery)\r\n        this.setState({\r\n            searchQuery: searchQuery,\r\n            searchArray: searchArray,\r\n            loading: false\r\n        })\r\n    }\r\n}\r\n\r\nexport default SearchResult;","const username = \"user24\";\r\nconst password = \"48D4vaVh6Ra3DD8w\";\r\nconst auth = btoa(username + \":\" + password);\r\nconst headers = new Headers({\r\n    \"Authorization\": \"Basic \" + auth,\r\n    \"Content-Type\": \"application/json\"\r\n});\r\n\r\nconst GETComments = async (imdbID) => {\r\n    let URL = \"https://strive-school-testing-apis.herokuapp.com/api/comments/\".concat(imdbID);\r\n        try {\r\n            let response = await fetch(URL, {\r\n                method: \"GET\",\r\n                headers\r\n                })\r\n            if (response.ok) {\r\n                return await response.json()\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n}\r\n\r\nexport default GETComments;","import React from 'react';\r\n\r\nconst SingleComment = (props) => {\r\n    console.log(props)\r\n    let comment = props.comment;\r\n    return (\r\n        \r\n        <li className=\"list-group-item d-flex justify-content-between align-items-center\">\r\n            {comment.comment}\r\n            <span class=\"badge badge-primary badge-pill\">{comment.rate}</span>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default SingleComment;","import React, { Component } from 'react';\r\nimport GETComments from '../API/GETComments';\r\nimport SingleComment from './SingleComment';\r\n\r\nclass MovieComments extends Component {\r\n    state = {\r\n        loading: true\r\n    }\r\n    render() {\r\n        if (this.state.loading) {\r\n            return (\r\n                <div className=\"spinner-grow\" role=\"status\">\r\n                    <span className=\"sr-only\">Loading...</span>\r\n                </div>\r\n            )\r\n        } else if (!this.state.loading && this.state.comments.length > 0) {\r\n            return (\r\n                <ul className=\"list-group list-group-flush\">\r\n                    {this.state.comments.map((comment, index) => <SingleComment key={index} comment={comment} />)}\r\n                </ul>\r\n            );\r\n        } else return (\r\n            <div>No comments available. Be the first one to comment.</div>\r\n        )\r\n            \r\n    }\r\n    componentDidMount = async () => {\r\n        let comments = await GETComments(this.props.movieID);\r\n        this.setState({\r\n            comments: comments,\r\n            loading: false\r\n        })\r\n    }\r\n}\r\n\r\nexport default MovieComments;","import React, { Component } from 'react';\r\nimport OMDBGETimdbID from '../API/OMDB-GET-imdbID';\r\nimport MovieComments from './MovieComments';\r\n\r\nclass MovieDetail extends Component {\r\n    state = {\r\n        loading: true\r\n    }\r\n   \r\n    render() {\r\n        if(!this.state.loading) {\r\n            return (\r\n                <div>\r\n                    <div className=\"row my-2 justify-content-center\">\r\n                        <div className=\"col-8 col-sm-3 col-md-3 p-0\">\r\n                            <img \r\n                                src={this.state.movie.Poster} \r\n                                className = \"img-thumbnail\"\r\n                                alt={this.state.movie.Title} \r\n                                style={{ width: \"100%\" }}>                                \r\n                            </img>\r\n                        </div>\r\n                        <div className=\"col-12 col-sm-9 col-md-5 p-0\">\r\n                            <ul className=\"list-group list-group-flush\">\r\n                                <li className=\"list-group-item\">Title: {this.state.movie.Title}</li>\r\n                                <li className=\"list-group-item\">Year: {this.state.movie.Year}</li>\r\n                                <li className=\"list-group-item\">Genre: {this.state.movie.Genre}</li>\r\n                                <li className=\"list-group-item\">IMDB Rating: {this.state.movie.imdbRating}</li>\r\n                                <li className=\"list-group-item\">{this.state.movie.Plot}</li>\r\n                            </ul>\r\n                        </div>\r\n                        <div className=\"col-md-4 p-0\">                            \r\n                            <MovieComments movieID={this.state.movie.imdbID} />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } else {\r\n            return (\r\n                <div className=\"spinner-grow\" role=\"status\">\r\n                    <span className=\"sr-only\">Loading...</span>\r\n                </div>\r\n            )\r\n        }\r\n        \r\n    }\r\n    \r\n    componentDidMount = async() => {\r\n        console.log(\"Component did mount.\")\r\n        let movieID = this.props.match.params.movieId;\r\n        let movie = await OMDBGETimdbID(movieID);\r\n        this.setState({\r\n            movieID: movieID,\r\n            movie: movie,\r\n            loading: false\r\n        })\r\n    }\r\n\r\n    componentDidUpdate = async (prevProps, prevState) => {\r\n        if(prevState !== this.state) {\r\n            console.log(\"Previous State: \", prevState);\r\n            console.log(\"New State: \", this.state);\r\n        }\r\n        if(prevProps !== this.props) {\r\n            console.log(\"Previous Props: \", prevProps);\r\n            console.log(\"New Props: \", this.props);\r\n        }        \r\n        let movieID = this.props.match.params.movieId;\r\n        if(movieID !== this.state.movieID) {\r\n            this.setState({ loading: true });\r\n            let movie = await OMDBGETimdbID(movieID);\r\n            this.setState({\r\n                movieID: movieID,\r\n                movie: movie\r\n            })\r\n        }\r\n    }    \r\n}\r\n\r\nexport default MovieDetail;","import React, { Component } from 'react';\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\nimport NavBar from './NavBar';\r\nimport InTheater from './InTheater';\r\nimport SearchResult from './SearchResult';\r\nimport MovieDetail from './MovieDetail'\r\n\r\n\r\nclass MainComponent extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <section>\r\n                <Router>\r\n                    <NavBar />\r\n                    <div className=\"container-fluid\">\r\n                        <div className=\"container\">\r\n                            <Route path=\"/movie-detail/:movieId\" component={MovieDetail} />\r\n                            <Route path=\"/movies-in-theater\" component={InTheater} />\r\n                            <Route path=\"/search/:searchQuery\" component={SearchResult} />\r\n                        </div>\r\n                    </div>\r\n                    <footer className=\"navbar fixed-bottom navbar-dark bg-dark\">\r\n                        <div className=\"text-white ml-auto\">FayJu &copy;2019</div>\r\n                    </footer>\r\n                </Router>\r\n            </section>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MainComponent;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport MainContainer from './components/MainComponent';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<MainContainer />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}