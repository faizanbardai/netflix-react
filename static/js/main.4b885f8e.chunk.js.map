{"version":3,"sources":["components/NavBar.jsx","API/Authorization.jsx","API/OMDB-GET-imdbID.jsx","components/SingleMovie.jsx","components/InTheater.jsx","API/OMDB-GET-Search.jsx","components/SearchResult.jsx","API/GETComments.jsx","API/POSTComment.jsx","components/WriteComment.jsx","API/DELETEComment.jsx","components/SingleComment.jsx","components/MovieComments.jsx","components/MovieDetail.jsx","components/MainComponent.jsx","serviceWorker.js","index.js"],"names":["NavBar","state","search","e","setState","searchKeyword","target","value","className","to","data-toggle","data-target","type","aria-controls","aria-expanded","aria-label","id","onKeyUp","this","placeholder","Component","authorization","serverName","credentials","apikey","baseURL","OMDBGETimdbID","imdbID","a","async","URL","concat","fetch","method","response","ok","json","console","log","SingleMovie","loading","componentDidMount","movieID","props","movie","role","src","Poster","style","width","alt","Title","inTheaterSection","inTheater","map","key","OMDBGETSearch","searchQuery","SearchResult","match","params","searchArray","Error","error","componentDidUpdate","prevProps","location","pathname","Search","length","headers","Headers","GETComments","POSTComments","comment","body","JSON","stringify","WriteComment","submittingComment","captureComment","preventDefault","commentObject","document","querySelector","POSTComment","message","addComments","onSubmit","required","rows","selected","DELETEComments","commentID","SingleComment","onClick","DELETEComment","deleteComment","_id","rate","author","fromNow","updatedAt","MovieComments","comments","MovieDetail","movieId","newComment","deletedComment","filter","Year","imdbRating","Genre","Plot","MainComponent","path","component","render","InTheater","Boolean","window","hostname","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4b885f8e.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass NavBar extends Component {\r\n  state = {}\r\n  search = (e) => {\r\n    this.setState({\r\n      searchKeyword: e.target.value\r\n    })\r\n  }\r\n  render() {\r\n    return (\r\n      <nav className=\"navbar fixed-top navbar-expand-sm navbar-light bg-light\">\r\n        <Link to=\"/\">\r\n          <div\r\n            className=\"navbar-brand\"\r\n            data-toggle=\"collapse\"\r\n            data-target=\".navbar-collapse.show\"\r\n          >FayJu Flix</div>\r\n        </Link>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-toggle=\"collapse\"\r\n          data-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav mr-auto\">\r\n            <li\r\n              className=\"nav-item active\"\r\n              data-toggle=\"collapse\"\r\n              data-target=\".navbar-collapse.show\"\r\n            >\r\n              <Link to=\"/movies-in-theater\" className=\"nav-link\" >Movies In Theater</Link>\r\n            </li>\r\n          </ul>\r\n          <form className=\"form-inline\">\r\n            <input\r\n              onKeyUp={this.search}\r\n              className=\"form-control mr-sm-2\"\r\n              type=\"search\"\r\n              placeholder=\"Search movies\"\r\n              aria-label=\"Search\">\r\n            </input>\r\n            <Link to={\"/search/\" + this.state.searchKeyword}>\r\n              <button\r\n                className=\"btn btn-outline-success my-2 my-sm-0\"\r\n                type=\"submit\"\r\n                data-toggle=\"collapse\"\r\n                data-target=\".navbar-collapse.show\"\r\n              >\r\n                Search\r\n              </button>\r\n            </Link>\r\n          </form>\r\n        </div>\r\n      </nav >\r\n    );\r\n  }\r\n}\r\n\r\nexport default NavBar;","const authorization = (serverName) => {\r\n    const credentials =\r\n    {\r\n        \"striveComment\": {\r\n            \"baseURL\": \"https://strive-school-testing-apis.herokuapp.com/api/comments/\",\r\n            \"username\": \"user24\",\r\n            \"password\": \"48D4vaVh6Ra3DD8w\"\r\n        },\r\n        \"OMDB\": {\r\n            \"baseURL\": \"https://www.omdbapi.com/?apikey=\",\r\n            \"apikey\": \"251ff3f5&\"\r\n        },\r\n        \"herokuapp\": {\r\n            \"baseURL\": \"https://be-netflix-react-comments.herokuapp.com/comments/\",\r\n        }\r\n    };\r\n    return credentials[serverName];\r\n};\r\n\r\nexport default authorization;","import authorization from './Authorization';\r\nconst credentials = authorization(\"OMDB\");\r\nconst apikey = credentials.apikey;\r\nconst baseURL = credentials.baseURL;\r\nconst OMDBGETimdbID = async (imdbID) => {\r\n    let URL = baseURL + apikey + \"i=\".concat(imdbID);\r\n        try {\r\n            let response = await fetch(URL, {\r\n                method: \"GET\"\r\n            })\r\n            if (response.ok) {\r\n                return await response.json()\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n}\r\n\r\nexport default OMDBGETimdbID;","import React, { Component } from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nimport OMDBGETimdbID from '../API/OMDB-GET-imdbID';\r\nclass SingleMovie extends Component {\r\n    state = {\r\n        loading: true\r\n    };\r\n    render() {\r\n        let {movie, loading} = this.state;\r\n        if (loading) {\r\n            return (\r\n                <div className=\"spinner-grow\" role=\"status\">\r\n                    <span className=\"sr-only\">Loading...</span>\r\n                </div>\r\n            );\r\n        } else {\r\n            return (\r\n                <div className=\"col-4 col-sm-3 col-md-2 px-1\">\r\n                    <Link to={\"/movie-detail/\" + this.state.movie.imdbID}>\r\n                        <img src={movie.Poster} style={{ width: \"100%\" }} className=\"mb-2\" alt={movie.Title} />\r\n                    </Link>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n    componentDidMount = async () => {\r\n        let movieID = this.props.movie.imdbID;\r\n        let movie = await OMDBGETimdbID(movieID);\r\n        this.setState({\r\n            movie: movie,\r\n            loading: false\r\n        })\r\n    }\r\n};\r\nexport default SingleMovie;","import React from 'react'\r\nimport SingleMovie from './SingleMovie';\r\n\r\nconst inTheaterSection = (props) => {\r\n    \r\n    return (\r\n        <>\r\n            <h3 className=\"display-4\">In Theater</h3>\r\n            <div className=\"row\">\r\n                {props.inTheater.map((movie) => <SingleMovie movie={movie} key={movie.imdbID} />)}\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default inTheaterSection;","import authorization from './Authorization';\r\nconst credentials = authorization(\"OMDB\");\r\nconst apikey = credentials.apikey;\r\nconst baseURL = credentials.baseURL;\r\nconst OMDBGETSearch = async (searchQuery) => {\r\n    let URL = baseURL + apikey + \"&s=\".concat(searchQuery);\r\n    try {\r\n        let response = await fetch(URL, {\r\n            method: \"GET\"\r\n        })\r\n        if (response.ok) {\r\n            return await response.json()\r\n        }\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport default OMDBGETSearch;","import React, { Component } from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nimport OMDBGETSearch from '../API/OMDB-GET-Search';\r\n\r\nclass SearchResult extends Component {\r\n    state = {\r\n        searchQuery: this.props.match.params.searchQuery,\r\n        loading: true\r\n    }\r\n    render() {\r\n        let { searchQuery, searchArray, loading, error } = this.state;\r\n        if (error) {\r\n            return (\r\n                <div>{error}</div>\r\n            )\r\n        } else if (loading) {\r\n            return (\r\n                <div className=\"spinner-grow\" role=\"status\">\r\n                    <span className=\"sr-only\">Loading...</span>\r\n                </div>\r\n            )\r\n        } else if (searchArray.Search) {\r\n            return (\r\n                <>\r\n                    <h3 className=\"display-4\">Search: {searchQuery}</h3>\r\n                    {searchArray.Search.length > 0 && <div className=\"row\">\r\n                        {searchArray.Search.map((movie) => {\r\n                            return (\r\n                                <div key={movie.imdbID} className=\"col-6 col-sm-4 col-md-3 col-lg-2 px-1\">\r\n                                    <Link to={\"/movie-detail/\" + movie.imdbID}>\r\n                                        <img\r\n                                            src={movie.Poster === \"N/A\" ? \"https://via.placeholder.com/300x445\" : movie.Poster}\r\n                                            style={{ width: \"100%\" }}\r\n                                            className=\"mb-2\"\r\n                                            alt={movie.Title}\r\n                                        />\r\n                                    </Link>\r\n                                </div>\r\n                            )\r\n                        })}\r\n                    </div>}\r\n                </>\r\n            )\r\n        }\r\n    }\r\n    componentDidMount = async () => {\r\n        let searchQuery = this.props.match.params.searchQuery;\r\n        let searchArray = await OMDBGETSearch(searchQuery)\r\n\r\n        searchArray.Error ? this.setState({ error: searchArray.Error }) :\r\n\r\n            this.setState({\r\n                searchArray: searchArray,\r\n                loading: false\r\n            })\r\n    }\r\n    componentDidUpdate = async (prevProps) => {\r\n        if (this.props.location.pathname !== prevProps.location.pathname) {\r\n            let searchQuery = this.props.match.params.searchQuery;\r\n            let searchArray = await OMDBGETSearch(searchQuery)\r\n\r\n            searchArray.Error ? this.setState({ error: searchArray.Error }) :\r\n\r\n                this.setState({\r\n                    searchQuery: searchQuery,\r\n                    searchArray: searchArray,\r\n                    error: false,\r\n                    loading: false\r\n                })\r\n        }\r\n    }\r\n}\r\n\r\nexport default SearchResult;","import authorization from './Authorization';\r\nconst credentials = authorization(\"herokuapp\");\r\nconst baseURL = credentials.baseURL;\r\n// const username = credentials.username;\r\n// const password = credentials.password;\r\n// const auth = btoa(username + \":\" + password);\r\nconst headers = new Headers({\r\n    // \"Authorization\": \"Basic \" + auth,\r\n    \"Content-Type\": \"application/json\"\r\n});\r\n\r\nconst GETComments = async (imdbID) => {\r\n    let URL = baseURL.concat(imdbID);\r\n    try {\r\n        let response = await fetch(URL, {\r\n            method: \"GET\",\r\n            headers\r\n        })\r\n        if (response.ok) {\r\n            return await response.json()\r\n        }\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport default GETComments;","import authorization from './Authorization';\r\nconst credentials = authorization(\"herokuapp\");\r\nconst baseURL = credentials.baseURL;\r\n// const username = credentials.username;\r\n// const password = credentials.password;\r\n// const auth = btoa(username + \":\" + password);\r\nconst headers = new Headers({\r\n    // \"Authorization\": \"Basic \" + auth,\r\n    \"Content-Type\": \"application/json\"\r\n});\r\n\r\nconst POSTComments = async (comment) => {\r\n    let URL = baseURL;\r\n        try {\r\n            let response = await fetch(URL, {\r\n                method: \"POST\",\r\n                body: JSON.stringify(comment),\r\n                headers\r\n                })\r\n            if (response.ok) {\r\n                return await response.json()\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n}\r\n\r\nexport default POSTComments;","import React, { Component } from 'react';\r\nimport POSTComment from '../API/POSTComment';\r\n\r\nclass WriteComment extends Component {\r\n    state = {\r\n        submittingComment: false\r\n    }\r\n\r\n    captureComment = async (e) => {\r\n        e.preventDefault();\r\n        let commentObject = {\r\n            \"comment\": document.querySelector(\"#comment\").value,\r\n            \"rate\": document.querySelector(\"#rating\").value,\r\n            \"elementId\": this.props.movieID\r\n        };\r\n        this.setState({submittingComment: true});\r\n        let message = await POSTComment(commentObject);\r\n        this.props.addComments(message);\r\n        this.setState({submittingComment: false});\r\n        document.querySelector(\"#comment\").value = \"\";\r\n        document.querySelector(\"#rating\").value = 5;\r\n    }\r\n    render() {\r\n\r\n        return (\r\n            <>\r\n                {this.state.submittingComment ? <>Loading... </> :\r\n                    (\r\n                        <form onSubmit={this.captureComment}>\r\n                            <div className=\"form-group\">\r\n                                {/* <label for=\"comment\">Example textarea</label> */}\r\n                                <textarea\r\n                                    required\r\n                                    className=\"form-control mb-2\"\r\n                                    id=\"comment\"\r\n                                    rows=\"3\"\r\n                                    placeholder=\"Write a new comment...\"\r\n                                >\r\n                                </textarea>\r\n                                <div className=\"input-group\">\r\n                                    <select\r\n                                        className=\"custom-select\"\r\n                                        id=\"rating\"\r\n                                        aria-label=\"Example select with button addon\">\r\n                                        <option value=\"5\">Five</option>\r\n                                        <option value=\"4\">Four</option>\r\n                                        <option selected value=\"3\">Three</option>\r\n                                        <option value=\"2\">Two</option>\r\n                                        <option value=\"1\">One</option>\r\n                                    </select>\r\n                                    <div className=\"input-group-append\">\r\n                                        <button className=\"btn btn-outline-secondary\" type=\"submit\">Submit</button>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </form>\r\n                    )\r\n                }\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default WriteComment;","import authorization from './Authorization';\r\nconst credentials = authorization(\"herokuapp\");\r\nconst baseURL = credentials.baseURL;\r\n// const username = credentials.username;\r\n// const password = credentials.password;\r\n// const auth = btoa(username + \":\" + password);\r\nconst headers = new Headers({\r\n    // \"Authorization\": \"Basic \" + auth,\r\n    \"Content-Type\": \"application/json\"\r\n});\r\n\r\nconst DELETEComments = async (commentID) => {\r\n    let URL = baseURL.concat(commentID);\r\n    try {\r\n        let response = await fetch(URL, {\r\n            method: \"DELETE\",\r\n            headers\r\n        })\r\n        if (response.ok) {\r\n            return await response.json()\r\n        }\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport default DELETEComments;","import React from 'react';\r\nimport Moment from 'react-moment';\r\nimport 'moment-timezone';\r\nimport DELETEComment from \"../API/DELETEComment\";\r\n\r\nconst SingleComment = (props) => {\r\n    const deleteComment = async (commentID) => {\r\n        let response = await DELETEComment(commentID);\r\n        props.deleteComment(response);\r\n    }\r\n    let comment = props.comment;\r\n    return (\r\n        <button onClick={() => { deleteComment(comment._id) }} className=\"list-group-item list-group-item-action list-group-item-light\">\r\n            <div className=\"d-flex justify-content-between align-items-center\">\r\n                {comment.comment}\r\n                <span className=\"badge badge-primary badge-pill\">{comment.rate}</span>\r\n            </div>\r\n            <footer className=\"blockquote-footer\">\r\n                by {comment.author} <Moment fromNow>{comment.updatedAt}</Moment>\r\n            </footer>\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default SingleComment;","import React from 'react';\r\nimport SingleComment from './SingleComment';\r\n\r\nconst MovieComments = (props) => {\r\n    let { comments, deleteComment } = props;\r\n    return (\r\n        <>\r\n            {comments.length === 0 ?\r\n                <div className=\"alert alert-info\" role=\"alert\">\r\n                    No comments available. Be the first one to comment.\r\n                    </div>\r\n                :\r\n                <ul className=\"list-group list-group-flush\">\r\n                    {comments.map((comment) =>\r\n                        <SingleComment\r\n                            key={comment._id}\r\n                            comment={comment}\r\n                            deleteComment={deleteComment}\r\n                        />)\r\n                    }\r\n                </ul>\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\n\r\nexport default MovieComments;","import React, { Component } from 'react';\r\nimport OMDBGETimdbID from '../API/OMDB-GET-imdbID';\r\nimport GETComments from '../API/GETComments';\r\nimport WriteComment from './WriteComment';\r\nimport MovieComments from './MovieComments';\r\n\r\n\r\nclass MovieDetail extends Component {\r\n    state = {\r\n        loading: true,\r\n        comments: []\r\n    }\r\n\r\n    render() {\r\n        let { loading, movie, comments } = this.state;\r\n        if (loading) {\r\n            return (\r\n                <div className=\"spinner-grow\" role=\"status\">\r\n                    <span className=\"sr-only\">Loading...</span>\r\n                </div>\r\n            );\r\n        } else {\r\n            return (\r\n                <div className=\"row my-2\">\r\n                    <div className=\"col-12 col-sm-3 col-md-3 p-2 text-center\">\r\n                        <img\r\n                            src={movie.Poster === \"N/A\"? \"https://via.placeholder.com/300x445\": movie.Poster} \r\n                            className=\"img-thumbnail\"\r\n                            alt={movie.Title}\r\n                            style={{ width: \"100%\" }}>\r\n                        </img>\r\n                    </div>\r\n                    <div className=\"col-12 col-sm-9 col-md-5 p-2\">\r\n                        <ul className=\"list-group list-group-flush\">\r\n                            <li className=\"\r\n                                list-group-item \r\n                                font-weight-bold \r\n                                bg-primary \r\n                                text-white\r\n                                \">{movie.Title} ({movie.Year})\r\n                                <span className=\"badge badge-light float-right\">{movie.imdbRating}</span>\r\n                            </li>\r\n                            <li className=\"list-group-item\">Genre: {movie.Genre}</li>\r\n                            <li className=\"list-group-item\">{movie.Plot}</li>\r\n                        </ul>\r\n                    </div>\r\n                    <div className=\"col-md-4 p-2\">\r\n                        <MovieComments comments={comments} deleteComment={this.deleteComment}/>\r\n                        <WriteComment movieID={movie.imdbID} addComments={this.addComments} />\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    componentDidMount = async () => {\r\n        let movieID = this.props.match.params.movieId;\r\n        let movie = await OMDBGETimdbID(movieID);\r\n        let comments = await GETComments(movieID);\r\n        this.setState({\r\n            movieID: movieID,\r\n            movie: movie,\r\n            comments: comments,\r\n            loading: false\r\n        })\r\n    }\r\n    addComments = (newComment) => {\r\n        console.log(\"adding new comment and updating state\");        \r\n        this.setState({\r\n            comments: this.state.comments.concat(newComment)\r\n        })\r\n    }\r\n\r\n    deleteComment = (deletedComment) => {\r\n        console.log(\"deleting comment and updating state\");\r\n        this.setState({\r\n            comments: this.state.comments.filter(comment => comment._id !== deletedComment._id)\r\n        })\r\n    }\r\n\r\n    componentDidUpdate = async () => {\r\n        console.log(\"Movie Detail Component updated!\");\r\n    }\r\n}\r\n\r\nexport default MovieDetail;","import React from 'react';\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport NavBar from './NavBar';\r\nimport InTheater from './InTheater';\r\nimport SearchResult from './SearchResult';\r\nimport MovieDetail from './MovieDetail';\r\n\r\nexport const MainComponent = () => {\r\n    const inTheater = [\r\n        {\r\n            \"imdbID\": \"tt7286456\",\r\n        },\r\n        {\r\n            \"imdbID\": \"tt9248934\"\r\n        },\r\n        {\r\n            \"imdbID\": \"tt1025100\"\r\n        },\r\n        {\r\n            \"imdbID\": \"tt4520988\"\r\n        },\r\n        {\r\n            \"imdbID\": \"tt9763442\"\r\n        }];\r\n    return (\r\n        <section>\r\n            <Router>\r\n                <NavBar />\r\n                <div className=\"container-fluid\">\r\n                    <div className=\"container\">\r\n                        <Switch>\r\n                            <Route path=\"/movie-detail/:movieId\" component={MovieDetail} />\r\n                            <Route path=\"/movies-in-theater\" render={(props) => (\r\n                                <InTheater inTheater={inTheater} />\r\n                            )} />\r\n                            <Route path=\"/search/:searchQuery\" component={SearchResult} />\r\n                        </Switch>\r\n                    </div>\r\n                </div>\r\n                <footer className=\"navbar fixed-bottom navbar-dark bg-dark\">\r\n                    <div className=\"text-white ml-auto\">FayJu &copy;2019</div>\r\n                </footer>\r\n            </Router>\r\n        </section>\r\n    );\r\n}\r\n\r\nexport default MainComponent;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport MainContainer from './components/MainComponent';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<MainContainer />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}