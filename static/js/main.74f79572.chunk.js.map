{"version":3,"sources":["components/NavBar.jsx","API/OMDB-GET-imdbID.jsx","components/SingleMovie.jsx","components/InTheater.jsx","API/OMDB-GET-Search.jsx","components/SearchResult.jsx","API/GETComments.jsx","API/DELETEComment.jsx","components/SingleComment.jsx","API/POSTComment.jsx","components/WriteComment.jsx","components/MovieComments.jsx","components/MovieDetail.jsx","components/MainComponent.jsx","serviceWorker.js","index.js"],"names":["NavBar","state","search","e","setState","searchKeyword","target","value","className","to","data-toggle","data-target","type","aria-controls","aria-expanded","aria-label","id","onKeyUp","this","placeholder","Component","OMDBGETimdbID","imdbID","a","URL","concat","fetch","method","response","ok","json","console","log","SingleMovie","loading","componentDidMount","movieID","props","movie","role","src","Poster","style","width","alt","Title","inTheater","inTheaterSection","map","index","key","OMDBGETSearch","searchQuery","SearchResult","match","params","searchArray","Error","error","componentDidUpdate","prevProps","location","pathname","Search","length","toString","auth","btoa","username","headers","Headers","GETComments","commentID","SingleComment","deleteComment","DELETEComment","updateFn","comment","onClick","_id","rate","author","fromNow","updatedAt","body","JSON","stringify","WriteComment","captureComment","preventDefault","commentObject","document","querySelector","POSTComment","activateSubmit","onSubmit","required","onChange","rows","selected","MovieComments","updateComments","comments","MovieDetail","movieId","Year","imdbRating","Genre","Plot","MainComponent","path","component","InTheater","Boolean","window","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qRAiEeA,E,2MA7DbC,MAAQ,G,EACRC,OAAS,SAACC,GACR,EAAKC,SAAS,CACZC,cAAeF,EAAEG,OAAOC,S,wEAI1B,OACE,yBAAKC,UAAU,2DACb,kBAAC,IAAD,CAAMC,GAAG,KACP,yBACED,UAAU,eACVE,cAAY,WACZC,cAAY,yBAHd,eAMF,4BACEH,UAAU,iBACVI,KAAK,SACLF,cAAY,WACZC,cAAY,0BACZE,gBAAc,yBACdC,gBAAc,QACdC,aAAW,qBACX,0BAAMP,UAAU,yBAElB,yBAAKA,UAAU,2BAA2BQ,GAAG,0BAC3C,wBAAIR,UAAU,sBACZ,wBACEA,UAAU,kBACVE,cAAY,WACZC,cAAY,yBAEZ,kBAAC,IAAD,CAAMF,GAAG,qBAAqBD,UAAU,YAAxC,uBAGJ,0BAAMA,UAAU,eACd,2BACES,QAASC,KAAKhB,OACdM,UAAU,uBACVI,KAAK,SACLO,YAAY,gBACZJ,aAAW,WAEb,kBAAC,IAAD,CAAMN,GAAI,WAAaS,KAAKjB,MAAMI,eAChC,4BACEG,UAAU,uCACVI,KAAK,SACLF,cAAY,WACZC,cAAY,yBAJd,kB,GA9COS,a,uBCWNC,EAdI,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,6DACdC,EAAM,8CAA8CC,OAAOH,GAD7C,kBAGWI,MAAMF,EAAK,CAC5BG,OAAQ,QAJF,YAGNC,EAHM,QAMGC,GANH,gCAOOD,EAASE,OAPhB,iGAUVC,QAAQC,IAAR,MAVU,0DAAH,sDCkCJC,E,2MA9BXhC,MAAQ,CACJiC,SAAS,G,EAoBbC,kB,sBAAoB,8BAAAZ,EAAA,6DACZa,EAAU,EAAKC,MAAMC,MAAMhB,OADf,SAEED,EAAce,GAFhB,OAEZE,EAFY,OAGhB,EAAKlC,SAAS,CACVkC,MAAOA,EACPJ,SAAS,IALG,2C,wEAlBV,IAAD,EACkBhB,KAAKjB,MAAvBqC,EADA,EACAA,MACL,OAFK,EACOJ,QAGJ,yBAAK1B,UAAU,eAAe+B,KAAK,UAC/B,0BAAM/B,UAAU,WAAhB,eAKJ,yBAAKA,UAAU,gCACX,kBAAC,IAAD,CAAMC,GAAI,iBAAmBS,KAAKjB,MAAMqC,MAAMhB,QAC1C,yBAAKkB,IAAKF,EAAMG,OAAQC,MAAO,CAAEC,MAAO,QAAUnC,UAAU,OAAOoC,IAAKN,EAAMO,c,GAhB5EzB,aCApB0B,EAAY,CACd,CACI,OAAU,aAEd,CACI,OAAU,aAEd,CACI,OAAU,aAEd,CACI,OAAU,aAEd,CACI,OAAU,cAcHC,EAXU,WACrB,OACI,oCACI,wBAAIvC,UAAU,aAAd,cACA,yBAAKA,UAAU,OACVsC,EAAUE,KAAI,SAACV,EAAOW,GAAR,OAAkB,kBAAC,EAAD,CAAaX,MAAOA,EAAOY,IAAKD,UCXlEE,EAdI,uCAAG,WAAOC,GAAP,iBAAA7B,EAAA,6DACdC,EAAM,8CAA8CC,OAAO2B,GAD7C,kBAGW1B,MAAMF,EAAK,CAC5BG,OAAQ,QAJF,YAGNC,EAHM,QAMGC,GANH,gCAOOD,EAASE,OAPhB,iGAUVC,QAAQC,IAAR,MAVU,0DAAH,sDCyEJqB,E,2MApEXpD,MAAQ,CACJmD,YAAa,EAAKf,MAAMiB,MAAMC,OAAOH,YACrClB,SAAS,G,EAsCbC,kB,sBAAoB,8BAAAZ,EAAA,6DACZ6B,EAAc,EAAKf,MAAMiB,MAAMC,OAAOH,YAD1B,SAEQD,EAAcC,GAFtB,QAEZI,EAFY,QAIJC,MAAQ,EAAKrD,SAAS,CAAEsD,MAAOF,EAAYC,QAEnD,EAAKrD,SAAS,CACVoD,YAAaA,EACbtB,SAAS,IARD,2C,EAWpByB,mB,uCAAqB,WAAOC,GAAP,iBAAArC,EAAA,yDACb,EAAKc,MAAMwB,SAASC,WAAaF,EAAUC,SAASC,SADvC,uBAETV,EAAc,EAAKf,MAAMiB,MAAMC,OAAOH,YAF7B,SAGWD,EAAcC,GAHzB,QAGTI,EAHS,QAKDC,MAAQ,EAAKrD,SAAS,CAAEsD,MAAOF,EAAYC,QAEnD,EAAKrD,SAAS,CACVgD,YAAaA,EACbI,YAAaA,EACbE,OAAO,EACPxB,SAAS,IAXJ,2C,8HA/CX,IAAD,EAC8ChB,KAAKjB,MAAlDmD,EADD,EACCA,YAAaI,EADd,EACcA,YAAatB,EAD3B,EAC2BA,QAASwB,EADpC,EACoCA,MACzC,OAAIA,EAEI,6BAAMA,GAEHxB,EAEH,yBAAK1B,UAAU,eAAe+B,KAAK,UAC/B,0BAAM/B,UAAU,WAAhB,eAGDgD,EAAYO,OAEf,oCACI,wBAAIvD,UAAU,aAAd,WAAmC4C,GAClCI,EAAYO,OAAOC,OAAS,GAAK,yBAAKxD,UAAU,OAC5CgD,EAAYO,OAAOf,KAAI,SAACV,EAAOW,GAC5B,OACI,yBAAKC,IAAKD,EAAMgB,WAAYzD,UAAU,yCAClC,kBAAC,IAAD,CAAMC,GAAI,iBAAmB6B,EAAMhB,QAC/B,yBACIkB,IAAsB,QAAjBF,EAAMG,OAAmB,sCAAwCH,EAAMG,OAC5EC,MAAO,CAAEC,MAAO,QAChBnC,UAAU,OACVoC,IAAKN,EAAMO,oBAbxC,M,GAjBYzB,aCFrB8C,EAAOC,KAAKC,2BACZC,EAAU,IAAIC,QAAQ,CACxB,cAAiB,SAAWJ,EAC5B,eAAgB,qBAkBLK,EAfE,uCAAG,WAAOjD,GAAP,iBAAAC,EAAA,6DACZC,EAAM,iEAAiEC,OAAOH,GADlE,kBAGSI,MAAMF,EAAK,CAC5BG,OAAQ,MACR0C,YALQ,YAGRzC,EAHQ,QAOCC,GAPD,gCAQKD,EAASE,OARd,iGAWZC,QAAQC,IAAR,MAXY,0DAAH,sD,iBCNXkC,G,MAAOC,KAAKC,4BACZC,EAAU,IAAIC,QAAQ,CACxB,cAAiB,SAAWJ,EAC5B,eAAgB,qBAkBLK,EAfE,uCAAG,WAAOC,GAAP,iBAAAjD,EAAA,6DACZC,EAAM,iEAAiEC,OAAO+C,GADlE,kBAGS9C,MAAMF,EAAK,CAC5BG,OAAQ,SACR0C,YALQ,YAGRzC,EAHQ,QAOCC,GAPD,gCAQKD,EAASE,OARd,iGAWZC,QAAQC,IAAR,MAXY,0DAAH,sDCgBFyC,EAnBO,SAACpC,GACnB,IAAMqC,EAAa,uCAAG,WAAOF,GAAP,SAAAjD,EAAA,sEACZoD,EAAcH,GADF,OAElBnC,EAAMuC,WAFY,2CAAH,sDAIfC,EAAUxC,EAAMwC,QACpB,OACI,4BAAQC,QAAS,WAAQJ,EAAcG,EAAQE,MAAQvE,UAAU,gEAC7D,yBAAKA,UAAU,qDACVqE,EAAQA,QACT,0BAAMrE,UAAU,kCAAkCqE,EAAQG,OAE9D,4BAAQxE,UAAU,qBAAlB,MACQqE,EAAQI,OADhB,IACwB,kBAAC,IAAD,CAAQC,SAAO,GAAEL,EAAQM,cChBvDjB,EAAOC,KAAKC,2BACZC,EAAU,IAAIC,QAAQ,CACxB,cAAiB,SAAWJ,EAC5B,eAAgB,qBAmBLK,EAhBE,uCAAG,WAAOM,GAAP,eAAAtD,EAAA,4DACN,iEADM,kBAGaG,MAFnB,iEAE8B,CAC5BC,OAAQ,OACRyD,KAAMC,KAAKC,UAAUT,GACrBR,YANI,YAGJzC,EAHI,QAQKC,GARL,gCASSD,EAASE,OATlB,iGAYRC,QAAQC,IAAR,MAZQ,0DAAH,sDC+CFuD,E,2MAnDXC,eAAiB,SAACrF,GACdA,EAAEsF,iBACF,IAAIC,EAAgB,CAChB,QAAWC,SAASC,cAAc,YAAYrF,MAC9C,KAAQoF,SAASC,cAAc,WAAWrF,MAC1C,UAAa,EAAK8B,MAAMD,SAE5ByD,EAAYH,GACZC,SAASC,cAAc,YAAYrF,MAAM,GACzCoF,SAASC,cAAc,WAAWrF,MAAM,EACxC,EAAK8B,MAAMuC,Y,EAEfkB,eAAiB,a,wEAIb,OACI,0BAAMC,SAAU7E,KAAKsE,gBACjB,yBAAKhF,UAAU,cAEX,8BACIwF,UAAQ,EACRC,SAAU/E,KAAK4E,eACftF,UAAU,oBACVQ,GAAG,UACHkF,KAAK,IACL/E,YAAY,2BAGhB,yBAAKX,UAAU,eACX,4BACIA,UAAU,gBACVQ,GAAG,SACHD,aAAW,oCAEX,4BAAQR,MAAM,KAAd,QACA,4BAAQA,MAAM,KAAd,QACA,4BAAQ4F,UAAQ,EAAC5F,MAAM,KAAvB,SACA,4BAAQA,MAAM,KAAd,OACA,4BAAQA,MAAM,KAAd,QAEJ,yBAAKC,UAAU,sBACX,4BAAQA,UAAU,4BAA4BI,KAAK,UAAnD,kB,GA3CDQ,aC4DZgF,E,2MAzDXC,e,sBAAiB,4BAAA9E,EAAA,6DACb,EAAKnB,SAAS,CACV8B,SAAS,IAEbH,QAAQC,IAAI,kBAJC,SAKQuC,EAAY,EAAKlC,MAAMD,SAL/B,OAKTkE,EALS,OAMb,EAAKlG,SAAS,CACV8B,SAAS,EACToE,SAAUA,IARD,2C,EAWjBrG,MAAQ,CACJiC,SAAS,EACToE,SAAU,I,EA+BdnE,kB,sBAAoB,4BAAAZ,EAAA,sEACKgD,EAAY,EAAKlC,MAAMD,SAD5B,OACZkE,EADY,OAEhB,EAAKlG,SAAS,CACVkG,SAAUA,EACVpE,SAAS,IAJG,2C,EAOpByB,mBAAqB,WACjB5B,QAAQC,IAAI,oCACZD,QAAQC,IAAI,UAAW,EAAK/B,MAAMiC,U,wEAtC5B,IAAD,OACCoE,EAAapF,KAAKjB,MAAlBqG,SAEN,OADkBpF,KAAKjB,MAAjBiC,QAGE,yBAAK1B,UAAU,eAAe+B,KAAK,UAC/B,0BAAM/B,UAAU,WAAhB,eAKJ,oCACyB,IAApB8F,EAAStC,QACN,yBAAKxD,UAAU,mBAAmB+B,KAAK,SAAvC,uDAGH+D,EAAStC,OAAS,GACf,wBAAIxD,UAAU,+BACT8F,EAAStD,KAAI,SAAC6B,EAAS5B,GAAV,OACV,kBAAC,EAAD,CACIC,IAAKD,EACL4B,QAASA,EACTD,SAAU,EAAKyB,qBAG/B,kBAAC,EAAD,CAAcjE,QAASlB,KAAKmB,MAAMD,QAASwC,SAAU1D,KAAKmF,sB,GAzClDjF,aC6DbmF,E,2MA7DXtG,MAAQ,CACJiC,SAAS,G,EA6CbC,kB,sBAAoB,8BAAAZ,EAAA,6DACZa,EAAU,EAAKC,MAAMiB,MAAMC,OAAOiD,QADtB,SAEEnF,EAAce,GAFhB,OAEZE,EAFY,OAGhB,EAAKlC,SAAS,CACVgC,QAASA,EACTE,MAAOA,EACPJ,SAAS,IANG,2C,EAUpByB,mB,sBAAqB,sBAAApC,EAAA,sDACjBQ,QAAQC,IAAI,mCADK,2C,wEApDX,IACDE,EAAWhB,KAAKjB,MAAhBiC,QACAI,EAASpB,KAAKjB,MAAdqC,MACL,OAAIJ,EAEI,yBAAK1B,UAAU,eAAe+B,KAAK,UAC/B,0BAAM/B,UAAU,WAAhB,eAKJ,yBAAKA,UAAU,YACX,yBAAKA,UAAU,4CACX,yBACIgC,IAAsB,QAAjBF,EAAMG,OAAkB,sCAAuCH,EAAMG,OAC1EjC,UAAU,gBACVoC,IAAKN,EAAMO,MACXH,MAAO,CAAEC,MAAO,WAGxB,yBAAKnC,UAAU,gCACX,wBAAIA,UAAU,+BACV,wBAAIA,UAAU,yEAKP8B,EAAMO,MALb,KAKsBP,EAAMmE,KAL5B,IAMI,0BAAMjG,UAAU,iCAAiC8B,EAAMoE,aAE3D,wBAAIlG,UAAU,mBAAd,UAAwC8B,EAAMqE,OAC9C,wBAAInG,UAAU,mBAAmB8B,EAAMsE,QAG/C,yBAAKpG,UAAU,gBACX,kBAAC,EAAD,CAAe4B,QAASE,EAAMhB,e,GAxC5BF,aCwBXyF,EApBc,WACzB,OACI,iCACI,kBAAC,IAAD,KACI,kBAAC,EAAD,MACA,yBAAKrG,UAAU,mBACX,yBAAKA,UAAU,aACX,kBAAC,IAAD,CAAOsG,KAAK,yBAAyBC,UAAWR,IAChD,kBAAC,IAAD,CAAOO,KAAK,qBAAqBC,UAAWC,IAC5C,kBAAC,IAAD,CAAOF,KAAK,uBAAuBC,UAAW1D,MAGtD,4BAAQ7C,UAAU,2CACd,yBAAKA,UAAU,sBAAf,sBCTAyG,QACW,cAA7BC,OAAOrD,SAASsD,UAEe,UAA7BD,OAAOrD,SAASsD,UAEhBD,OAAOrD,SAASsD,SAAS7D,MACvB,2DCZN8D,IAASC,OAAO,kBAAC,EAAD,MAAmB1B,SAAS2B,eAAe,SD2HrD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.74f79572.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass NavBar extends Component {\r\n  state = {}\r\n  search = (e) => {\r\n    this.setState({\r\n      searchKeyword: e.target.value\r\n    })\r\n  }\r\n  render() {\r\n    return (\r\n      <nav className=\"navbar fixed-top navbar-expand-sm navbar-light bg-light\">\r\n        <Link to=\"/\">\r\n          <div\r\n            className=\"navbar-brand\"\r\n            data-toggle=\"collapse\"\r\n            data-target=\".navbar-collapse.show\"\r\n          >FayJu Flix</div>\r\n        </Link>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-toggle=\"collapse\"\r\n          data-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav mr-auto\">\r\n            <li\r\n              className=\"nav-item active\"\r\n              data-toggle=\"collapse\"\r\n              data-target=\".navbar-collapse.show\"\r\n            >\r\n              <Link to=\"/movies-in-theater\" className=\"nav-link\" >Movies In Theater</Link>\r\n            </li>\r\n          </ul>\r\n          <form className=\"form-inline\">\r\n            <input\r\n              onKeyUp={this.search}\r\n              className=\"form-control mr-sm-2\"\r\n              type=\"search\"\r\n              placeholder=\"Search movies\"\r\n              aria-label=\"Search\">\r\n            </input>\r\n            <Link to={\"/search/\" + this.state.searchKeyword}>\r\n              <button\r\n                className=\"btn btn-outline-success my-2 my-sm-0\"\r\n                type=\"submit\"\r\n                data-toggle=\"collapse\"\r\n                data-target=\".navbar-collapse.show\"\r\n              >\r\n                Search\r\n              </button>\r\n            </Link>\r\n          </form>\r\n        </div>\r\n      </nav >\r\n    );\r\n  }\r\n}\r\n\r\nexport default NavBar;","const OMDBGETimdbID = async (imdbID) => {\r\n    let URL = \"https://www.omdbapi.com/?apikey=251ff3f5&i=\".concat(imdbID);\r\n        try {\r\n            let response = await fetch(URL, {\r\n                method: \"GET\"\r\n            })\r\n            if (response.ok) {\r\n                return await response.json()\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n}\r\n\r\nexport default OMDBGETimdbID;","import React, { Component } from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nimport OMDBGETimdbID from '../API/OMDB-GET-imdbID';\r\nclass SingleMovie extends Component {\r\n    state = {\r\n        loading: true\r\n    };\r\n    render() {\r\n        let {movie, loading} = this.state;\r\n        if (loading) {\r\n            return (\r\n                <div className=\"spinner-grow\" role=\"status\">\r\n                    <span className=\"sr-only\">Loading...</span>\r\n                </div>\r\n            );\r\n        } else {\r\n            return (\r\n                <div className=\"col-4 col-sm-3 col-md-2 px-1\">\r\n                    <Link to={\"/movie-detail/\" + this.state.movie.imdbID}>\r\n                        <img src={movie.Poster} style={{ width: \"100%\" }} className=\"mb-2\" alt={movie.Title} />\r\n                    </Link>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n    componentDidMount = async () => {\r\n        let movieID = this.props.movie.imdbID;\r\n        let movie = await OMDBGETimdbID(movieID);\r\n        this.setState({\r\n            movie: movie,\r\n            loading: false\r\n        })\r\n    }\r\n};\r\nexport default SingleMovie;","import React from 'react';\r\nimport SingleMovie from './SingleMovie';\r\n\r\nconst inTheater = [\r\n    {\r\n        \"imdbID\": \"tt7286456\",\r\n    },\r\n    {\r\n        \"imdbID\": \"tt9248934\"\r\n    },\r\n    {\r\n        \"imdbID\": \"tt1025100\"\r\n    },\r\n    {\r\n        \"imdbID\": \"tt4520988\"\r\n    },\r\n    {\r\n        \"imdbID\": \"tt9763442\"\r\n    }];\r\n\r\nconst inTheaterSection = () => {\r\n    return (\r\n        <>\r\n            <h3 className=\"display-4\">In Theater</h3>\r\n            <div className=\"row\">\r\n                {inTheater.map((movie, index) => <SingleMovie movie={movie} key={index} />)}\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default inTheaterSection;","const OMDBGETSearch = async (searchQuery) => {\r\n    let URL = \"https://www.omdbapi.com/?apikey=251ff3f5&s=\".concat(searchQuery);\r\n        try {\r\n            let response = await fetch(URL, {\r\n                method: \"GET\"\r\n            })\r\n            if (response.ok) {\r\n                return await response.json()\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n}\r\n\r\nexport default OMDBGETSearch;","import React, { Component } from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nimport OMDBGETSearch from '../API/OMDB-GET-Search';\r\n\r\nclass SearchResult extends Component {\r\n    state = {\r\n        searchQuery: this.props.match.params.searchQuery,\r\n        loading: true\r\n    }\r\n    render() {\r\n        let { searchQuery, searchArray, loading, error } = this.state;\r\n        if (error) {\r\n            return (\r\n                <div>{error}</div>\r\n            )\r\n        } else if (loading) {\r\n            return (\r\n                <div className=\"spinner-grow\" role=\"status\">\r\n                    <span className=\"sr-only\">Loading...</span>\r\n                </div>\r\n            )\r\n        } else if (searchArray.Search) {\r\n            return (\r\n                <>\r\n                    <h3 className=\"display-4\">Search: {searchQuery}</h3>\r\n                    {searchArray.Search.length > 0 && <div className=\"row\">\r\n                        {searchArray.Search.map((movie, index) => {\r\n                            return (\r\n                                <div key={index.toString()} className=\"col-6 col-sm-4 col-md-3 col-lg-2 px-1\">\r\n                                    <Link to={\"/movie-detail/\" + movie.imdbID}>\r\n                                        <img\r\n                                            src={movie.Poster === \"N/A\" ? \"https://via.placeholder.com/300x445\" : movie.Poster}\r\n                                            style={{ width: \"100%\" }}\r\n                                            className=\"mb-2\"\r\n                                            alt={movie.Title}\r\n                                        />\r\n                                    </Link>\r\n                                </div>\r\n                            )\r\n                        })}\r\n                    </div>}\r\n                </>\r\n            )\r\n        }\r\n    }\r\n    componentDidMount = async () => {\r\n        let searchQuery = this.props.match.params.searchQuery;\r\n        let searchArray = await OMDBGETSearch(searchQuery)\r\n\r\n        searchArray.Error ? this.setState({ error: searchArray.Error }) :\r\n\r\n            this.setState({\r\n                searchArray: searchArray,\r\n                loading: false\r\n            })\r\n    }\r\n    componentDidUpdate = async (prevProps) => {\r\n        if (this.props.location.pathname !== prevProps.location.pathname) {\r\n            let searchQuery = this.props.match.params.searchQuery;\r\n            let searchArray = await OMDBGETSearch(searchQuery)\r\n\r\n            searchArray.Error ? this.setState({ error: searchArray.Error }) :\r\n\r\n                this.setState({\r\n                    searchQuery: searchQuery,\r\n                    searchArray: searchArray,\r\n                    error: false,\r\n                    loading: false\r\n                })\r\n        }\r\n    }\r\n}\r\n\r\nexport default SearchResult;","const username = \"user24\";\r\nconst password = \"48D4vaVh6Ra3DD8w\";\r\nconst auth = btoa(username + \":\" + password);\r\nconst headers = new Headers({\r\n    \"Authorization\": \"Basic \" + auth,\r\n    \"Content-Type\": \"application/json\"\r\n});\r\n\r\nconst GETComments = async (imdbID) => {\r\n    let URL = \"https://strive-school-testing-apis.herokuapp.com/api/comments/\".concat(imdbID);\r\n    try {\r\n        let response = await fetch(URL, {\r\n            method: \"GET\",\r\n            headers\r\n        })\r\n        if (response.ok) {\r\n            return await response.json()\r\n        }\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport default GETComments;","const username = \"user24\";\r\nconst password = \"48D4vaVh6Ra3DD8w\";\r\nconst auth = btoa(username + \":\" + password);\r\nconst headers = new Headers({\r\n    \"Authorization\": \"Basic \" + auth,\r\n    \"Content-Type\": \"application/json\"\r\n});\r\n\r\nconst GETComments = async (commentID) => {\r\n    let URL = \"https://strive-school-testing-apis.herokuapp.com/api/comments/\".concat(commentID);\r\n    try {\r\n        let response = await fetch(URL, {\r\n            method: \"DELETE\",\r\n            headers\r\n        })\r\n        if (response.ok) {\r\n            return await response.json()\r\n        }\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport default GETComments;","import React from 'react';\r\nimport Moment from 'react-moment';\r\nimport 'moment-timezone';\r\nimport DELETEComment from \"../API/DELETEComment\";\r\n\r\nconst SingleComment = (props) => {\r\n    const deleteComment = async (commentID) => {\r\n        await DELETEComment(commentID);\r\n        props.updateFn();\r\n    }\r\n    let comment = props.comment;\r\n    return (\r\n        <button onClick={() => { deleteComment(comment._id) }} className=\"list-group-item list-group-item-action list-group-item-light\">\r\n            <div className=\"d-flex justify-content-between align-items-center\">\r\n                {comment.comment}\r\n                <span className=\"badge badge-primary badge-pill\">{comment.rate}</span>\r\n            </div>\r\n            <footer className=\"blockquote-footer\">\r\n                by {comment.author} <Moment fromNow>{comment.updatedAt}</Moment>\r\n            </footer>\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default SingleComment;","const username = \"user24\";\r\nconst password = \"48D4vaVh6Ra3DD8w\";\r\nconst auth = btoa(username + \":\" + password);\r\nconst headers = new Headers({\r\n    \"Authorization\": \"Basic \" + auth,\r\n    \"Content-Type\": \"application/json\"\r\n});\r\n\r\nconst GETComments = async (comment) => {\r\n    let URL = \"https://strive-school-testing-apis.herokuapp.com/api/comments/\";\r\n        try {\r\n            let response = await fetch(URL, {\r\n                method: \"POST\",\r\n                body: JSON.stringify(comment),\r\n                headers\r\n                })\r\n            if (response.ok) {\r\n                return await response.json()\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n}\r\n\r\nexport default GETComments;","import React, { Component } from 'react';\r\nimport POSTComment from '../API/POSTComment';\r\n\r\nclass WriteComment extends Component {\r\n    captureComment = (e) => {\r\n        e.preventDefault();\r\n        let commentObject = {\r\n            \"comment\": document.querySelector(\"#comment\").value,\r\n            \"rate\": document.querySelector(\"#rating\").value,\r\n            \"elementId\": this.props.movieID\r\n        };\r\n        POSTComment(commentObject);\r\n        document.querySelector(\"#comment\").value=\"\";\r\n        document.querySelector(\"#rating\").value=5;\r\n        this.props.updateFn();\r\n    }\r\n    activateSubmit = () => {\r\n\r\n    }\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.captureComment}>\r\n                <div className=\"form-group\">\r\n                    {/* <label for=\"comment\">Example textarea</label> */}\r\n                    <textarea\r\n                        required\r\n                        onChange={this.activateSubmit}\r\n                        className=\"form-control mb-2\"\r\n                        id=\"comment\"\r\n                        rows=\"3\"\r\n                        placeholder=\"Write a new comment...\"\r\n                    >\r\n                    </textarea>\r\n                    <div className=\"input-group\">\r\n                        <select\r\n                            className=\"custom-select\"\r\n                            id=\"rating\"\r\n                            aria-label=\"Example select with button addon\">\r\n                            {/* <option selected>Rating</option> */}\r\n                            <option value=\"5\">Five</option>\r\n                            <option value=\"4\">Four</option>\r\n                            <option selected value=\"3\">Three</option>\r\n                            <option value=\"2\">Two</option>\r\n                            <option value=\"1\">One</option>\r\n                        </select>\r\n                        <div className=\"input-group-append\">\r\n                            <button className=\"btn btn-outline-secondary\" type=\"submit\">Submit</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default WriteComment;","import React, { Component } from 'react';\r\nimport GETComments from '../API/GETComments';\r\nimport SingleComment from './SingleComment';\r\nimport WriteComment from './WriteComment'\r\n\r\nclass MovieComments extends Component {\r\n    updateComments = async () => {\r\n        this.setState({\r\n            loading: true\r\n        })\r\n        console.log(\"Updating State\");\r\n        let comments = await GETComments(this.props.movieID);\r\n        this.setState({\r\n            loading: false,\r\n            comments: comments\r\n        })\r\n    }\r\n    state = {\r\n        loading: true,\r\n        comments: []\r\n    }\r\n    render() {\r\n        let { comments } = this.state;\r\n        let { loading } = this.state;\r\n        if (loading) {\r\n            return (\r\n                <div className=\"spinner-grow\" role=\"status\">\r\n                    <span className=\"sr-only\">Loading...</span>\r\n                </div>\r\n            )\r\n        } else\r\n            return (\r\n                <>\r\n                    {comments.length === 0 &&\r\n                        <div className=\"alert alert-info\" role=\"alert\">\r\n                            No comments available. Be the first one to comment.\r\n                        </div>}\r\n                    {comments.length > 0 &&\r\n                        <ul className=\"list-group list-group-flush\">\r\n                            {comments.map((comment, index) =>\r\n                                <SingleComment\r\n                                    key={index}\r\n                                    comment={comment}\r\n                                    updateFn={this.updateComments}\r\n                                />)}\r\n                        </ul>}\r\n                    <WriteComment movieID={this.props.movieID} updateFn={this.updateComments} />\r\n                </>\r\n            );\r\n    } \r\n    componentDidMount = async () => {\r\n        let comments = await GETComments(this.props.movieID);\r\n        this.setState({\r\n            comments: comments,\r\n            loading: false\r\n        })\r\n    }\r\n    componentDidUpdate = () => {\r\n        console.log(\"Movie Comments Component updated\");\r\n        console.log(\"Loading\", this.state.loading);\r\n    }\r\n}\r\n\r\nexport default MovieComments;","import React, { Component } from 'react';\r\nimport OMDBGETimdbID from '../API/OMDB-GET-imdbID';\r\nimport MovieComments from './MovieComments';\r\n\r\nclass MovieDetail extends Component {\r\n    state = {\r\n        loading: true\r\n    }\r\n\r\n    render() {\r\n        let {loading} = this.state;\r\n        let {movie} = this.state;\r\n        if (loading) {\r\n            return (\r\n                <div className=\"spinner-grow\" role=\"status\">\r\n                    <span className=\"sr-only\">Loading...</span>\r\n                </div>\r\n            );\r\n        } else {\r\n            return (\r\n                <div className=\"row my-2\">\r\n                    <div className=\"col-12 col-sm-3 col-md-3 p-2 text-center\">\r\n                        <img\r\n                            src={movie.Poster === \"N/A\"? \"https://via.placeholder.com/300x445\": movie.Poster} \r\n                            className=\"img-thumbnail\"\r\n                            alt={movie.Title}\r\n                            style={{ width: \"100%\" }}>\r\n                        </img>\r\n                    </div>\r\n                    <div className=\"col-12 col-sm-9 col-md-5 p-2\">\r\n                        <ul className=\"list-group list-group-flush\">\r\n                            <li className=\"\r\n                                list-group-item \r\n                                font-weight-bold \r\n                                bg-primary \r\n                                text-white\r\n                                \">{movie.Title} ({movie.Year})\r\n                                <span className=\"badge badge-light float-right\">{movie.imdbRating}</span>\r\n                            </li>\r\n                            <li className=\"list-group-item\">Genre: {movie.Genre}</li>\r\n                            <li className=\"list-group-item\">{movie.Plot}</li>\r\n                        </ul>\r\n                    </div>\r\n                    <div className=\"col-md-4 p-2\">\r\n                        <MovieComments movieID={movie.imdbID} />\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    componentDidMount = async () => {\r\n        let movieID = this.props.match.params.movieId;\r\n        let movie = await OMDBGETimdbID(movieID);\r\n        this.setState({\r\n            movieID: movieID,\r\n            movie: movie,\r\n            loading: false\r\n        })\r\n    }\r\n\r\n    componentDidUpdate = async () => {\r\n        console.log(\"Movie Detail Component updated!\");\r\n    }\r\n}\r\n\r\nexport default MovieDetail;","import React from 'react';\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\nimport NavBar from './NavBar';\r\nimport InTheater from './InTheater';\r\nimport SearchResult from './SearchResult';\r\nimport MovieDetail from './MovieDetail'\r\n\r\n\r\nexport const MainComponent = () => {\r\n    return (\r\n        <section>\r\n            <Router>\r\n                <NavBar />\r\n                <div className=\"container-fluid\">\r\n                    <div className=\"container\">\r\n                        <Route path=\"/movie-detail/:movieId\" component={MovieDetail} />\r\n                        <Route path=\"/movies-in-theater\" component={InTheater} />\r\n                        <Route path=\"/search/:searchQuery\" component={SearchResult} />\r\n                    </div>\r\n                </div>\r\n                <footer className=\"navbar fixed-bottom navbar-dark bg-dark\">\r\n                    <div className=\"text-white ml-auto\">FayJu &copy;2019</div>\r\n                </footer>\r\n            </Router>\r\n        </section>\r\n    );\r\n}\r\n\r\nexport default MainComponent;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport MainContainer from './components/MainComponent';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<MainContainer />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}