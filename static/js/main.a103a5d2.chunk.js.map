{"version":3,"sources":["components/NavBar.jsx","components/SingleMovie.jsx","components/InTheater.jsx","components/MainComponent.jsx","serviceWorker.js","index.js"],"names":["Example","props","useState","isOpen","setIsOpen","Navbar","color","dark","expand","NavbarBrand","href","NavbarToggler","onClick","Collapse","navbar","Nav","className","NavItem","NavLink","UncontrolledDropdown","nav","inNavbar","DropdownToggle","caret","DropdownMenu","right","DropdownItem","SingleMovie","state","componentDidMount","a","URL","concat","movie","fetch","method","response","ok","json","movieObject","setState","console","log","this","Title","Col","xs","sm","md","Card","CardImg","top","width","src","Poster","alt","Component","inTheater","Row","map","movieID","MainComponent","FayJu","searchKeyword","search","e","target","value","Container","NavBar","InTheater","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wXAsDeA,EAvCC,SAACC,GAAW,IAAD,EACGC,oBAAS,GADZ,mBAClBC,EADkB,KACVC,EADU,KAKzB,OACE,6BACE,kBAACC,EAAA,EAAD,CAAQC,MAAM,OAAOC,MAAI,EAACC,OAAO,MAC/B,kBAACC,EAAA,EAAD,CAAaC,KAAK,IAAlB,cACA,kBAACC,EAAA,EAAD,CAAeC,QANN,kBAAMR,GAAWD,MAO1B,kBAACU,EAAA,EAAD,CAAUV,OAAQA,EAAQW,QAAM,GAC9B,kBAACC,EAAA,EAAD,CAAKC,UAAU,UAAUF,QAAM,GAC7B,kBAACG,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAASR,KAAK,IAAd,WAEF,kBAACO,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAASR,KAAK,IAAd,aAEF,kBAACS,EAAA,EAAD,CAAsBC,KAAG,EAACC,UAAQ,GAChC,kBAACC,EAAA,EAAD,CAAgBF,KAAG,EAACG,OAAK,GAAzB,WAGA,kBAACC,EAAA,EAAD,CAAcC,OAAK,GACjB,kBAACC,EAAA,EAAD,gBAGA,kBAACA,EAAA,EAAD,uB,iDCGDC,E,2MAzCXC,MAAQ,G,EACRC,kB,sBAAoB,8BAAAC,EAAA,6DACZC,EAAM,6CAA6CC,OAAO,EAAK/B,MAAMgC,OADzD,kBAGSC,MAAMH,EAAK,CAC5BI,OAAQ,QAJA,YAGRC,EAHQ,QAMCC,GAND,wCASmBD,EAASE,OAT5B,yBASAC,YATA,WAOHC,SAPG,0EAeZC,QAAQC,IAAR,MAfY,0D,wEAoBhB,GADAD,QAAQC,IAAI,SACRC,KAAKf,MAAMW,YAAa,CACxB,IAAIN,EAAQU,KAAKf,MAAMW,YACvBE,QAAQC,IAAIT,EAAMW,OAEtB,OACI,kBAACC,EAAA,EAAD,CAAKC,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAAIhC,UAAU,QAC/B2B,KAAKf,MAAMW,aACJ,kBAACU,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAASC,KAAG,EAACC,MAAM,OAAOC,IAAKpB,EAAMqB,OAAQC,IAAI,yB,GA9BnDC,a,QCeXC,E,iLAXP,OACI,oCACI,wBAAIzC,UAAU,aAAd,cACA,kBAAC0C,EAAA,EAAD,KACKf,KAAK1C,MAAMwD,UAAUE,KAAI,SAAAC,GAAO,OAAI,kBAAC,EAAD,CAAa3B,MAAO2B,a,GANrDJ,aCsBTK,E,2MAnBXjC,MAAQ,CACJ6B,UAAW,CAAC,YAAY,YAAY,YAAY,YAAY,aAC5DK,MAAO,GACPC,cAAe,I,EAEnBC,OAAS,SAACC,GACN,EAAKzB,SAAS,CAAEuB,cAAeE,EAAEC,OAAOC,S,wEAIxC,OACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAD,MAC8B,KAA7B1B,KAAKf,MAAMmC,eAAwB,kBAACO,EAAD,CAAWb,UAAWd,KAAKf,MAAM6B,iB,GAfzDD,aCORe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAAmBC,SAASC,eAAe,SD0HrD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a103a5d2.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport {\r\n  Collapse,\r\n  Navbar,\r\n  NavbarToggler,\r\n  NavbarBrand,\r\n  Nav,\r\n  NavItem,\r\n  NavLink,\r\n  UncontrolledDropdown,\r\n  DropdownToggle,\r\n  DropdownMenu,\r\n  DropdownItem  \r\n} from 'reactstrap';\r\n\r\nconst Example = (props) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const toggle = () => setIsOpen(!isOpen);\r\n\r\n  return (\r\n    <div>\r\n      <Navbar color=\"dark\" dark expand=\"md\">\r\n        <NavbarBrand href=\"\">FayJu-flix</NavbarBrand>\r\n        <NavbarToggler onClick={toggle} />\r\n        <Collapse isOpen={isOpen} navbar>\r\n          <Nav className=\"mr-auto\" navbar>\r\n            <NavItem>\r\n              <NavLink href=\"\">Movies</NavLink>\r\n            </NavItem>\r\n            <NavItem>\r\n              <NavLink href=\"\">TV Shows</NavLink>\r\n            </NavItem>\r\n            <UncontrolledDropdown nav inNavbar>\r\n              <DropdownToggle nav caret>\r\n                Profile\r\n              </DropdownToggle>\r\n              <DropdownMenu right>\r\n                <DropdownItem>\r\n                  Account\r\n                </DropdownItem>\r\n                <DropdownItem>\r\n                  Billing\r\n                </DropdownItem>\r\n              </DropdownMenu>\r\n            </UncontrolledDropdown>\r\n          </Nav>\r\n          \r\n        </Collapse>\r\n      </Navbar>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Example;","import React, { Component } from 'react';\r\nimport { Card, CardImg, Col } from 'reactstrap';\r\nclass SingleMovie extends Component {\r\n    state = {};\r\n    componentDidMount = async () => {\r\n        let URL = \"http://www.omdbapi.com/?apikey=251ff3f5&i=\".concat(this.props.movie);\r\n        try {\r\n            let response = await fetch(URL, {\r\n                method: \"GET\"\r\n            })\r\n            if (response.ok) {\r\n                this.setState(\r\n                    {\r\n                        movieObject: await response.json()\r\n                    }\r\n                )\r\n                // return await response.json();\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n    render() {\r\n        console.log(\"Hello\");\r\n        if (this.state.movieObject) {\r\n            var movie = this.state.movieObject\r\n            console.log(movie.Title);\r\n        }\r\n        return (\r\n            <Col xs=\"6\" sm=\"3\" md=\"2\" className=\"px-0\">\r\n                {this.state.movieObject &&\r\n                        <Card>\r\n                            <CardImg top width=\"100%\" src={movie.Poster} alt=\"Card image cap\" />                            \r\n                        </Card>\r\n                    }\r\n            </Col>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default SingleMovie;","import React, { Component } from 'react';\r\nimport SingleMovie from './SingleMovie';\r\nimport { Row } from 'reactstrap';\r\n\r\nclass inTheater extends Component {\r\n    render() {\r\n        return (\r\n            <>\r\n                <h3 className=\"display-4\">In Theater</h3>\r\n                <Row>\r\n                    {this.props.inTheater.map(movieID => <SingleMovie movie={movieID} />)}\r\n                </Row>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default inTheater;","import React, { Component } from 'react';\r\nimport { Container } from 'reactstrap';\r\nimport NavBar from './NavBar';\r\nimport InTheater from './InTheater';\r\n\r\nclass MainComponent extends Component {\r\n\r\n    state = {\r\n        inTheater: [\"tt7286456\",\"tt9248934\",\"tt1025100\",\"tt4520988\",\"tt9763442\"],\r\n        FayJu: [],\r\n        searchKeyword: \"\"\r\n    }\r\n    search = (e) => {\r\n        this.setState({ searchKeyword: e.target.value })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Container>\r\n                <NavBar />\r\n                {this.state.searchKeyword === \"\" && <InTheater inTheater={this.state.inTheater}/>}\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MainComponent;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport MainContainer from './components/MainComponent';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<MainContainer />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}